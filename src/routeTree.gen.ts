/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as WeatherImport } from './routes/weather'
import { Route as ReportImport } from './routes/report'
import { Route as RecordImport } from './routes/record'
import { Route as IndexImport } from './routes/index'
import { Route as IndexIndexImport } from './routes/index/index'

// Create/Update Routes

const WeatherRoute = WeatherImport.update({
  id: '/weather',
  path: '/weather',
  getParentRoute: () => rootRoute,
} as any)

const ReportRoute = ReportImport.update({
  id: '/report',
  path: '/report',
  getParentRoute: () => rootRoute,
} as any)

const RecordRoute = RecordImport.update({
  id: '/record',
  path: '/record',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const IndexIndexRoute = IndexIndexImport.update({
  id: '/index/',
  path: '/index/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/record': {
      id: '/record'
      path: '/record'
      fullPath: '/record'
      preLoaderRoute: typeof RecordImport
      parentRoute: typeof rootRoute
    }
    '/report': {
      id: '/report'
      path: '/report'
      fullPath: '/report'
      preLoaderRoute: typeof ReportImport
      parentRoute: typeof rootRoute
    }
    '/weather': {
      id: '/weather'
      path: '/weather'
      fullPath: '/weather'
      preLoaderRoute: typeof WeatherImport
      parentRoute: typeof rootRoute
    }
    '/index/': {
      id: '/index/'
      path: '/index'
      fullPath: '/index'
      preLoaderRoute: typeof IndexIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/record': typeof RecordRoute
  '/report': typeof ReportRoute
  '/weather': typeof WeatherRoute
  '/index': typeof IndexIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/record': typeof RecordRoute
  '/report': typeof ReportRoute
  '/weather': typeof WeatherRoute
  '/index': typeof IndexIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/record': typeof RecordRoute
  '/report': typeof ReportRoute
  '/weather': typeof WeatherRoute
  '/index/': typeof IndexIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/record' | '/report' | '/weather' | '/index'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/record' | '/report' | '/weather' | '/index'
  id: '__root__' | '/' | '/record' | '/report' | '/weather' | '/index/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  RecordRoute: typeof RecordRoute
  ReportRoute: typeof ReportRoute
  WeatherRoute: typeof WeatherRoute
  IndexIndexRoute: typeof IndexIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  RecordRoute: RecordRoute,
  ReportRoute: ReportRoute,
  WeatherRoute: WeatherRoute,
  IndexIndexRoute: IndexIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/record",
        "/report",
        "/weather",
        "/index/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/record": {
      "filePath": "record.tsx"
    },
    "/report": {
      "filePath": "report.tsx"
    },
    "/weather": {
      "filePath": "weather.tsx"
    },
    "/index/": {
      "filePath": "index/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
